---
import Layout from '../../layouts/Layout.astro';
import PlayerCard from '../../components/players/PlayerCard.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import { getAllPlayers, getEventsOfPlayer, getPlayerHandicapById, getPlayerName } from '../../code/players';
import { yearOfEvent } from '../../code/data';
import { getTotalWinsByPlayer, getEventsWonByPlayer, getHectorWinsByPlayer, getVictorWinsByPlayer, getMatchplayWinsByPlayer } from '../../code/stats';
import type { HectorEvent, MatchplayEvent, FinnkampenEvent } from '../../schemas/events';


function linkToPlayer(player: any): string {
    return `/players/${player.id}`;
}

function yearsOfHectorWins(player: any): number[] {
	return getHectorWinsByPlayer(player).map(yearOfEvent)
}

function yearsOfVictorWins(player: any): number[] {
	return getVictorWinsByPlayer(player).map(yearOfEvent)
}

function yearsOfMatchplayWins(player: any): number[] {
	return getMatchplayWinsByPlayer(player).map(yearOfEvent)
}

function starts(player: any): Array<any> {
	const hasWinner = (event: any): boolean => {
		if (event.format === 'hector') {
			return !!(event as HectorEvent).results?.winners?.hector
		} else if (event.format === 'finnkampen') {
			return !!(event as FinnkampenEvent).results?.winners?.finnkampen
		} else if (event.format === 'matchplay') {
			return !!(event as MatchplayEvent).results?.winners?.matchplay
		}
		return false
	}
	return getEventsOfPlayer(player.id).filter(hasWinner)
}

function startsCount(player: any): number {
	return starts(player).length
}

const players = getAllPlayers().sort((a, b) => {
	// First, sort by number of all wins (hector + victor + matchplay)
	const aWins = getTotalWinsByPlayer(a);
	const bWins = getTotalWinsByPlayer(b);
	if (aWins !== bWins) {
		return bWins - aWins; // Sort by number of wins descending
	}

	// Second, sort by number of Hector wins
	const aHectorsWon = yearsOfHectorWins(a);
	const bHectorsWon = yearsOfHectorWins(b);
	if (aHectorsWon.length !== bHectorsWon.length) {
		return bHectorsWon.length - aHectorsWon.length;
	}

	// Second, sort by number of Victor wins
	const aVictorsWon = yearsOfVictorWins(a);
	const bVictorsWon = yearsOfVictorWins(b);
	if (aVictorsWon.length !== bVictorsWon.length) {
		return bVictorsWon.length - aVictorsWon.length;
	}

	// Third, sort by number of Matchplay wins
	const aMatchplaysWon = yearsOfMatchplayWins(a);
	const bMatchplaysWon = yearsOfMatchplayWins(b);
	if (aMatchplaysWon.length !== bMatchplaysWon.length) {
		return bMatchplaysWon.length - aMatchplaysWon.length;
	}

	// Then, sort by most recent win
	const aMostRecentWin = Math.max(0, ...getEventsWonByPlayer(a).map(yearOfEvent));
	const bMostRecentWin = Math.max(0, ...getEventsWonByPlayer(b).map(yearOfEvent));
	if (aMostRecentWin !== bMostRecentWin) {
		return bMostRecentWin - aMostRecentWin;
	}

	// Then, sort by most recent start
	const aMostRecentStart = Math.max(0, ...starts(a).map(yearOfEvent));
	const bMostRecentStart = Math.max(0, ...starts(b).map(yearOfEvent));
	if (aMostRecentStart !== bMostRecentStart) {
		return bMostRecentStart - aMostRecentStart;
	}

	// Then, sort by number of starts
	const aNumberOfStarts = starts(a).length;
	const bNumberOfStarts = starts(b).length;
	if (aNumberOfStarts !== bNumberOfStarts) {
		return bNumberOfStarts - aNumberOfStarts;
	}

	// As the last resort, sort alphabetically by name
	return getPlayerName(a).localeCompare(getPlayerName(b));
})


---

<Layout title="Hector players">
    <main>
		<div class="breadcrumbs">
			<Breadcrumb title="Home" href="/" />
		</div>
        <h1><span class="text-gradient">Players</span></h1>
        <ul role="list" class="link-card-grid">
            {players.map((player) => {
				const hcp = getPlayerHandicapById(player.id)
                return <PlayerCard id={player.id} name={player.name} image={player.image} href={linkToPlayer(player)} starts={startsCount(player)} hectorWins={yearsOfHectorWins(player)} victorWins={yearsOfVictorWins(player)} matchplayWins={yearsOfMatchplayWins(player)} handicap={hcp} />
            })}
        </ul>
    </main>
</Layout>

<style>
	main {
		margin: auto;
		width: 900px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}

	h1 {
		text-transform: uppercase;
		font-size: 3.11rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
