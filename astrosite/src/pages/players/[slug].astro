---
import Layout from '../../layouts/Layout.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import AppearanceCard from '../../components/players/AppearanceCard.astro';
import HandicapHistoryChart from '../../components/players/HandicapHistoryChart.astro';
import { type Player } from '../../schemas/players';
import { type HandicapHistoryEntry } from '../../schemas/handicaps';
import { getEventsOfPlayer, getAllPlayerIds, getPlayerById, getPlayerName, getPlayerHandicapHistoryById } from '../../code/players';


export function getStaticPaths() {
    return getAllPlayerIds().map((id) => {
        return { params: { slug: id } };
    });
}

const { slug } = Astro.params;
let player: Player|undefined = getPlayerById(slug);
if (!player) {
    Astro.response.status = 404;
}
player = player!

const relatedEvents = getEventsOfPlayer(player.id);

const handicapHistory: Array<HandicapHistoryEntry>|null = player.handicap ? getPlayerHandicapHistoryById(player.id) : null;

const biography = player.biography && player.biography.length > 0 ? player.biography : null;

---

<Layout title={getPlayerName(player)}>
    <main>
        <div class="breadcrumbs">
            <Breadcrumb title="Home" href="/" />
            <Breadcrumb title="Players" href="/players" />
        </div>
        <h1><span class="text-gradient">{getPlayerName(player)}</span></h1>

        {player.biography && player.biography.length > 0 ? player.biography.map(paragraph => (
            <div class="biography">
                <p>{paragraph}</p>
            </div>
        )) : null}

        {player.image ? (
            <div class="hero">
                <img src={player.image} alt={getPlayerName(player)} />
            </div>
            ) : null
        }

        {player.handicap ? (
            <div class="handicap">
                <h2>Handicap</h2>
                {handicapHistory ? (<HandicapHistoryChart history={handicapHistory} current={player.handicap}/>) : null}
            </div>
            ): null
        }

        <div class="related-events">
            <h2>Appearances</h2>
            <ul role="list" class="link-card-grid">
                {relatedEvents.map((event) => {
                    return (
                        <AppearanceCard player={player} event={event} />
                    );
                })}
            </ul>
        </div>

    </main>
</Layout>

<style>
    pre {
        max-width: calc(100% - 2rem);
        overflow: scroll;
    }

    main {
		margin: auto;
		width: 900px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}

    h1 {
		text-transform: uppercase;
		font-size: 3.10rem;
		font-weight: 700;
		line-height: 1;
		text-align: left;
		margin-bottom: 1em;
	}

    h2 {
        margin-block-start: 1em;
        margin-block-end: 0.5em;
    }

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}

    .hero {
        display: flex;
        width: calc(100%);
        max-height: 300px;
    }
    .hero img {
        width: calc(100%);
    }

    .description {
        width: calc(100%);
    }
    .description img {
        width: calc(100%);
    }

    .biography {
        margin-block-start: 1em;
        margin-block-end: 1em;
    }

</style>
