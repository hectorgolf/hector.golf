---
import Layout from '../../../../layouts/Layout.astro';
import Breadcrumb from '../../../../components/Breadcrumb.astro';
import CourseRatingTable from '../../../../components/courses/CourseRatingTable.astro';
import ScorecardTable from '../../../../components/courses/ScorecardTable.astro';
import data from '../../../../data/courses.json';
import { type Course, schema as CourseSchema } from '../../../../schemas/courses';

export function getStaticPaths() {
    return data.flatMap((course) => {
        return course.course.descriptions.map((description) => {
            return { params: { slug: course.id, hole: description.hole.toString() } };
        });
    });
}

const { slug, hole } = Astro.params;
let _course = data.find((course) => course.id === slug)
console.log(`_course is of type ${typeof(_course)}:  ${JSON.stringify(_course)}`);
if (!_course) {
    Astro.response.status = 404;
}
const course: Course = CourseSchema.parse(_course);
const holeDescription = course.course.descriptions.find((description) => description.hole === parseInt(hole));
const holeData = (course.course.scorecard.men || course.course.scorecard.ladies).find((holeOnCourse) => holeOnCourse.hole === parseInt(hole));
const courseHref = `/courses/${slug}`;
---

<Layout title={course.name}>
    <main>
        <div class="breadcrumbs">
            <Breadcrumb title="Home" href="/" />
            <Breadcrumb title="Courses" href="/courses" />
            <Breadcrumb title={course.name} href={courseHref} />
        </div>

        <div class="box-container">
            <div class="hole-data-container">
                <h1>{hole}</h1>
                <div class="par">PAR {holeData?.par}</div>
                <div class="hcp">HCP {holeData?.hcp}</div>
                {course.course.tees.map((tee) => {
                    const holeLength = holeData?.lengths?.[tee.name]
                    return (
                        <div class="tee-length">
                            <svg class="color" width="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="10" cy="10" r="7" style={`fill:${tee.color};stroke:#000000;`}/>
                            </svg>
                            {holeLength} m
                        </div>
                    )
                })}
            </div>
            <div class="hole-layout-container">
                <span class="hole-layout">
                    <img src={holeDescription?.layout} alt={`Hole ${hole}`} />
                </span>
            </div>
        </div>

        <p>{holeDescription?.description}</p>
    </main>
</Layout>

<style>

    .hole-data-container .par {
        margin-top: 30px;
    }

    .hole-data-container .hcp {
        margin-bottom: 30px;
    }

    .box-container {
        display: flex;
        flex-direction: row;
        justify-content: stretch;
        min-width: 20px;
        min-height: 20px;
        margin-top: 50px;
    }

    .box-container .hole-data-container {
        flex: 0.3;
        min-width: 10px;
        min-height: 10px;
    }

    .box-container .hole-layout-container {
        flex: 0.7;
        min-width: 10px;
        min-height: 10px;
    }

    main {
        margin: auto;
        padding: 1rem;
        width: 900px;
        max-width: calc(100% - 2rem);
        color: white;
        font-size: 20px;
        line-height: 1.6;
    }

    h1 {
        font-size: 4rem;
        font-weight: 700;
        line-height: 1;
        text-align: left;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        display: inline;
    }

    .h1-container {
        margin-bottom: 20px;
    }

    .hole-layout img {
        max-height: 600px;
        min-height: 300px;
        max-width: calc(70%);
    }

</style>