---
import Layout from '../../../layouts/Layout.astro'
import Breadcrumb from '../../../components/Breadcrumb.astro'
import CourseCard from '../../../components/courses/CourseCard.astro'
import { type HectorEvent } from '../../../schemas/events'
import { type Course } from '../../../schemas/courses'
import { type Player } from '../../../schemas/players'
import { getAllEventIds, getCoursesOfEvent, getEventById } from '../../../code/events'
import { getPlayerName, getPlayerById } from '../../../code/players'
import { getLeaderboardsByEventId } from '../../../code/leaderboards/leaderboards'


export function getStaticPaths() {
    return getAllEventIds(e => e.format === 'hector').map((id) => {
        return { params: { slug: id } }
    })
}

const { slug } = Astro.params
let event: HectorEvent|undefined = slug ? (getEventById(slug) as HectorEvent) : undefined
if (!event) {
    Astro.response.status = 404
}
event = event!

const eventCourses: Array<Course> = getCoursesOfEvent(event.id)

const hectorWinners: Array<Player> = (event.results?.winners?.hector || [])
    .map(id => getPlayerById(id))
    .filter(p => !!p) as Array<Player>

const victorWinners: Array<Player> = (event.results?.winners?.victor || [])
    .map(id => getPlayerById(id as string) as Player)
    .filter(p => !!p) as Array<Player>

const untrimBucket = (trimmed: Array<{ id: string, handicap?: number }>): Array<Player> => {
    return trimmed.map(p => {
        const player = getPlayerById(p.id)
        return { ...player, handicap: p.handicap || player?.handicap }
    }).filter(p => !!p) as Array<Player>
}

const [ bucket1trimmed, bucket2trimmed ] = (event.buckets || [])
const bucket1 = bucket1trimmed ? untrimBucket(bucket1trimmed) : undefined
const bucket2 = bucket2trimmed ? untrimBucket(bucket2trimmed) : undefined

// Populate teams and Hector and Victor winners from a leaderboard data file if that
// data is available and the event file itself does not have winners on record
const leaderboards = getLeaderboardsByEventId(event.id)
if (hectorWinners.length === 0 && leaderboards.hector && leaderboards.hector.length > 0) {
    const allAreFinished = leaderboards.hector.every(team => team.through === "F")
    if (allAreFinished) {
        console.log(`Populating Hector winners for ${event.name} from available leaderboard data since it's missing from the event file: ${JSON.stringify(leaderboards.hector[0].players.map(p => p.id))}`)
        leaderboards.hector[0].players.forEach((winner) => hectorWinners.push(winner))
    } else {
        console.log(`Not populating Hector winners for ${event.name} from available leaderboard data since not all teams are finished`)
    }
}
if (victorWinners.length === 0 && leaderboards.victor && leaderboards.victor.length > 0) {
    const allAreFinished = leaderboards.victor.every(player => player.through === "F")
    if (allAreFinished) {
        console.log(`Populating Victor winner(s) for ${event.name} from available leaderboard data since it's missing from the event file: ${JSON.stringify(leaderboards.victor[0].players.map(p => p.id))}`)
        leaderboards.victor[0].players.forEach((winner) => victorWinners.push(winner))
    } else {
        console.log(`Not populating Victor winner(s) for ${event.name} from available leaderboard data since not all players are finished`)
    }
}

---
<Layout title="Event">
    <main>
		<div class="breadcrumbs">
			<Breadcrumb title="Home" href="/" />
			<Breadcrumb title="Events" href="/events" />
			<Breadcrumb title="Hectors" href="/events/hector" />
		</div>
        <h1><span class="text-gradient">{event.name}</span></h1>
        <div class="event-details">
            <div class="event-location">{event.location}</div>
            <div class="event-date">{event.date}</div>
        </div>
        {event.hero_image ? <img src={event.hero_image} title={event.name}/><br/> : ""}
        {event.description ? (<p>{event.description}</p>) : ""}

        {(hectorWinners.length > 0 || victorWinners.length > 0) && (
            <div class="results">
                <h2>Champions</h2>
                {hectorWinners.length > 0 && (
                    <div class="hector">
                        <h3>Hector Troph√©e</h3>
                        {hectorWinners.map((player, index) => {
                            return (
                                <span>{index > 0 && " & "}<a href={`/players/${player!.id}`}>{getPlayerName(player!)}</a></span>
                            )
                        })}
                    </div>
                )}
                {victorWinners.length > 0 && (
                    <div class="victor">
                        <h3>Victor</h3>
                        {victorWinners.map((player, index) => {
                            return (
                                <span>{index > 0 && " & "}<a href={`/players/${player!.id}`}>{getPlayerName(player!)}</a></span>
                            )
                        })}
                        {victorWinners.length > 1 && (<span class="tied">(tied)</span>)}
                    </div>
                )}
            </div>
        )}

        {(leaderboards.hector || leaderboards.victor) && (
            <div class="leaderboard">
                <a href={`${event.id}/leaderboard`}><h2>Leaderboard</h2></a>
            </div>
        )}

        {event.results?.teams && (
            <div class="teams">
                <h2>Teams</h2>
                <ul>
                    {event.results?.teams?.map(team => {
                        return (
                            <li>
                                {team.players.map(id => getPlayerById(id)).filter(p => !!p).map((player, index) => {
                                    return (
                                        <span>{index > 0 && " & "}<a href={`/players/${player!.id}`}>{getPlayerName(player!)}</a></span>
                                    )
                                })}
                            </li>
                        )
                    })}
                </ul>
            </div>
        )}

        {bucket1 && bucket2 && (
            <div class="field">
                <h2>Field and Projected Buckets</h2>
                <span class="buckets">
                    <div class="bucket">
                        <h3>Bucket 1</h3>
                        <ul role="list">
                            {bucket1.map(player => {
                                return (<li><a href={`/players/${player.id}`}>{getPlayerName(player)}</a> <span class="handicap">({Number(player.handicap).toFixed(1)})</span></li>)
                            })}
                        </ul>
                    </div>
                    <div class="bucket">
                        <h3>Bucket 2</h3>
                        <ul role="list">
                            {bucket2.map(player => {
                                return (<li><a href={`/players/${player.id}`}>{getPlayerName(player)}</a> <span class="handicap">({Number(player.handicap).toFixed(1)})</span></li>)
                            })}
                        </ul>
                    </div>
                </span>
            </div>
        )}

        {eventCourses.length > 0 && (
            <div class="related-courses">
                <h2>{eventCourses.length === 1 ? "Course" : "Courses"}</h2>
                <ul role="list" class="link-card-grid">
                    {eventCourses.map((course) => {
                        return (<CourseCard name={course.name} href={`/courses/${course.id}`} location={course.contact.address} image={course.hero_image} />)
                    })}
                </ul>
            </div>
        )}

    </main>
</Layout>

<style>
    pre {
        max-width: calc(100% - 2rem);
        overflow: scroll;
    }

    main {
		margin: auto;
		padding: 1rem;
		width: 900px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}

    h1 {
		text-transform: uppercase;
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: left;
		margin-bottom: 1em;
	}

    h2 {
        margin-block-start: 1em;
        margin-block-end: 0.5em;
    }

    .event-details {
        font-weight: bold;
    }

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}

    .hero {
        display: flex;
        width: calc(100%);
        max-height: 300px;
    }
    .hero img {
        width: calc(100%);
    }

    .description {
        width: calc(100%);
    }
    .description img {
        width: calc(100%);
    }

    .holes {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .holes .hole {
        margin: 10px;
        width: calc(33% - 20px);
        text-align: center;
    }

    .holes .hole img {
        min-width: 80px;
        height: 150px;
    }

    .holes a, .teams a, .results a {
        color: #fff;
        text-decoration: none;
    }

    .teams ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .holes a, .field a, .results a {
        color: #fff;
        text-decoration: none;
    }

    .field ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .field .handicap {
        color: lightblue;
        margin-left: 10px;
    }

    .results .victor .tied {
        font-style: italic;
    }

    .results h3 {
        margin-bottom: 0.25em;
    }

    .leaderboard .competitor .points {
        color: lightblue;
    }

    .leaderboard td, .leaderboard th {
        text-align: left;
        padding-right: 10px;
    }

    .leaderboard td.name, .leaderboard th.name {
        text-align: left;
        padding-right: 20px;
    }

    @media only screen and (max-width: 500px) {
        main {
            font-size: 16px;
            padding: 0.5rem;
        }

        h1 {
		    font-size: 2.25rem;
            margin-top: 40px;
        }
    }

    .field .buckets {
        display: grid;
        /* grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); */
        grid-template-columns: repeat(auto-fit, 250px);
        gap: 2rem;
        padding: 0;
    }

</style>
