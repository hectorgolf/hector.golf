---
import Layout from '../../../../layouts/Layout.astro'
import Breadcrumb from '../../../../components/Breadcrumb.astro'
import RoundsList from '../../../../components/events/RoundsList.astro'

import { type Player } from '../../../../schemas/players'
import { getAllPlayers, getPlayerName, getPlayerAliases } from '../../../../code/players'

import { type HectorEvent } from '../../../../schemas/events'
import { getAllEventIds, getEventById } from '../../../../code/events'

import { getLeaderboardsByEventId, getEventsWithLeaderboards, type EnrichedLeaderboard } from '../../../../code/leaderboards/leaderboards'


export function getStaticPaths() {
    const eventsWithLeaderboards = getEventsWithLeaderboards()
    return getAllEventIds(e => e.format === 'hector' && eventsWithLeaderboards.includes(e.id)).map((id) => {
        return { params: { slug: id } }
    })
}

const { slug } = Astro.params
let event: HectorEvent|undefined = slug ? (getEventById(slug) as HectorEvent) : undefined
if (!event) {
    Astro.response.status = 404
}
event = event!

const playersByName: {[name:string]: Player} = {}
getAllPlayers().forEach((player) => {
    playersByName[getPlayerName(player)] = player
    playersByName[getPlayerName({ ...player, privacy: undefined })] = player
    getPlayerAliases(player, true).forEach(alias => { playersByName[alias] = player })
})

const leaderboards = getLeaderboardsByEventId(event.id)
const hectorLeaderboard = leaderboards.hector
const victorLeaderboard = leaderboards.victor
const updatedAt = leaderboards.updatedAt ? new Date(leaderboards.updatedAt) : undefined

const leaderboardPosition = (leaderboard: EnrichedLeaderboard, points: number, lowerIsBetter: boolean): string => {
    const numberOfBetterScores = leaderboard.filter(({ points: p }) => lowerIsBetter ? p < points : p > points).length
    const numberOfEqualScores = leaderboard.filter(({ points: p }) => p === points).length
    if (numberOfEqualScores > 1) {
        return `T${numberOfBetterScores + 1}`
    } else {
        return `${numberOfBetterScores + 1}`
    }
}

const normalizeDiff = (diff: string): string => {
    if (diff !== '' && !diff.includes('.')) {
        return `${diff}.0`
    }
    return diff
}

---
<Layout title={`${event.name} leaderboard`}>
    <main>
		<div class="breadcrumbs">
			<Breadcrumb title="Home" href="/" />
			<Breadcrumb title="Events" href="/events" />
			<Breadcrumb title="Hectors" href="/events/hector" />
			<Breadcrumb title={event.name} href={`/events/hector/${event.id}`} />
		</div>
        <h1><span class="text-gradient">{event.name}</span></h1>
        <div class="event-details">
            <div class="event-location">{event.location}</div>
            <div class="event-date">{event.date}</div>
        </div>

        {hectorLeaderboard && (
            <div class="leaderboard hector">
                <h2>Hector</h2>
                {hectorLeaderboard.length === 0 && (
                    <p class="pending">(Field pending)</p>
                )}
                {hectorLeaderboard.length > 0 && (
                    <table>
                        <thead>
                            <tr>
                                <th class="place">#</th>
                                <th class="name">Team</th>
                                <th class="points">Score</th>
                                <th class="diff">Diff</th>
                                <th class="thru">Thru</th>
                            </tr>
                        </thead>
                        <tbody>
                        {hectorLeaderboard.map(({ players, points, diff, through, description }, index) => {
                            return (
                                <tr class="competitor">
                                    <td class="place">{leaderboardPosition(hectorLeaderboard, points, true)}</td>
                                    <td class="name">
                                        {(players.length > 0) ? players.map((player, index) => {
                                            return (
                                                <>
                                                    {index ? (<span class="plus"> + </span>) : null}
                                                    <a class="player" href={`/players/${player.id}`}>{getPlayerName(player)}</a>
                                                </>
                                            )}
                                        ) : (
                                            <span>{description}</span>
                                        )}
                                    </td>
                                    <td class="points">{points}</td>
                                    <td class="diff">{normalizeDiff(diff)}</td>
                                    <td class="thru">{through}</td>
                                </tr>
                            )
                        })}
                        </tbody>
                    </table>
                )}
            </div>
        )}

        {victorLeaderboard && (
            <div class="leaderboard victor">
                <h2>Victor</h2>
                {victorLeaderboard.length === 0 && (
                    <p class="pending">(Field pending)</p>
                )}
                {victorLeaderboard.length > 0 && (
                    <table>
                        <thead>
                            <tr>
                                <th class="place">#</th>
                                <th class="name">Player</th>
                                <th class="points">Score</th>
                                <th class="diff">Diff</th>
                                <th class="thru">Thru</th>
                            </tr>
                        </thead>
                        <tbody>
                        {victorLeaderboard.map(({ players, points, diff, through}, index) => {
                            return (
                                <tr class="competitor">
                                    <td class="place">{leaderboardPosition(victorLeaderboard, points, false)}</td>
                                    <td class="name">
                                        {players.map((player, index) => {
                                            return (
                                                <>
                                                    {index ? (<span class="plus"> + </span>) : null}
                                                    <a class="player" href={`/players/${player.id}`}>{getPlayerName(player)}</a>
                                                </>
                                            )}
                                        )}
                                    </td>
                                    <td class="points">{points}</td>
                                    <td class="diff">{normalizeDiff(diff)}</td>
                                    <td class="thru">{through}</td>
                                </tr>
                            )
                        })}
                        </tbody>
                    </table>
                )}
            </div>
        )}

        <RoundsList event={event} />

        {updatedAt && (<div class="updated-at">Updated:&nbsp;&nbsp;{updatedAt?.toISOString()}</div>)}

        <script is:inline>
            // Automatically refresh the page every 5 minutes
            setInterval(() => {
                location.href = location.href.split('?')[0] + '?' + Date.now();
            }, 5 * 60 * 1000);
        </script>
    </main>
</Layout>

<style>
    pre {
        max-width: calc(100% - 2rem);
        overflow: scroll;
    }

    main {
		margin: auto;
		width: 900px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}

    h1 {
		text-transform: uppercase;
		font-size: 3.07rem;
		font-weight: 700;
		line-height: 1;
		text-align: left;
		margin-bottom: 1em;
	}

    h2 {
        margin-block-start: 1em;
        margin-block-end: 0.5em;
    }

    .event-details {
        font-weight: bold;
    }

    .updated-at {
        font-size: 0.7em;
        color: lightgray;
        margin-top: 100px;
        margin-bottom: 30px;
    }

    .leaderboard table {
        border-collapse: collapse;
    }

    .leaderboard .pending {
        color: lightgray;
    }

    .leaderboard .competitor .name .plus {
        color: lightgray;
    }

    .leaderboard .competitor .points {
        color: lightblue;
    }

    .leaderboard .competitor .diff {
        color: lightcoral;
    }

    .leaderboard .points,
    .leaderboard .diff {
        text-align: right;
    }

    .leaderboard .thru {
        text-align: center;
    }

    .leaderboard .competitor {
        font-family: "Inconsolata", monospace;
        font-optical-sizing: auto;
        font-weight: 500;
        font-style: normal;
        font-variation-settings: "wdth" 87.5;
    }

    .leaderboard thead {
        font-family: "Inconsolata", monospace;
        font-optical-sizing: auto;
        font-weight: 700;
        font-style: normal;
        font-variation-settings: "wdth" 87.5;
    }

    .leaderboard tbody {
        vertical-align: top;
    }

    .leaderboard th {
        background-color: #333333;
    }

    .leaderboard td, .leaderboard th {
        text-align: left;
    }

    @media only screen and (max-width: 500px) {
        .leaderboard {
            font-size: 0.8em;
        }

        .leaderboard td, .leaderboard th { padding-right: 6px; }
        .leaderboard td.name, .leaderboard th.name { padding-right: 12px; }
        .leaderboard th.place { min-width: 24px; }
        .leaderboard th.name { min-width: 80px; }
        .leaderboard th.points { min-width: 30px; }
        .leaderboard th.diff { min-width: 30px; }
        .leaderboard th.thru { min-width: 30px; }
    }

    @media only screen and (min-width: 501px) {
        .leaderboard td, .leaderboard th { padding-right: 10px; }
        .leaderboard td.name, .leaderboard th.name { padding-right: 20px; }
        .leaderboard th.place { min-width: 34px; }
        .leaderboard th.name { min-width: 120px; }
        .leaderboard th.points { min-width: 40px; }
        .leaderboard th.diff { min-width: 40px; }
        .leaderboard th.thru { min-width: 40px; }
    }
</style>
